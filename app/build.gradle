plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

kapt {
    // ARouter-Kotlin
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

// 一下是配置保存apk签名key
// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
// 结束

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId "com.littlecorgi.courseji.teacher"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            // 还可以添加  'mips', 'mips64'
        }

        // 极光推送
        manifestPlaceholders = [
                JPUSH_PKGNAME: "com.littlecorgi.courseji.teacher",
                JPUSH_APPKEY : "d903ad14a1573503cff28e6b", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
                XIAOMI_APPID : "2882303761519907307",
                XIAOMI_APPKEY: "5391990793307"
        ]
        // 极光推送end
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    // 签名配置
    signingConfigs {
        config {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties.containsKey("KEYSTORE_PASS") ? keystoreProperties['KEYSTORE_PASS'] : System.getenv("KEYSTORE_PASS")
            keyAlias keystoreProperties.containsKey("ALIAS_NAME") ? keystoreProperties['ALIAS_NAME'] : System.getenv("ALIAS_NAME")
            keyPassword keystoreProperties.containsKey("ALIAS_PASS") ? keystoreProperties['ALIAS_PASS'] : System.getenv("ALIAS_PASS")
        }
    }
    // 编译变体
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 使用配置的签名信息
            signingConfig signingConfigs.config
        }
        debug {
            signingConfig signingConfigs.config
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding = true
    }
    sourceSets {
        main {
            // 单独调试与集成调试时使用不同的 AndroidManifest.xml 文件
            if (isRunAlone.toBoolean()) {
                manifest.srcFile 'src/main/manifest/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation project(':commonlib')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // 在下面添加只有APP需要的依赖
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["testExtJunit"]
    androidTestImplementation rootProject.ext.dependencies["espressoCore"]

    // apt必须各个模块自行添加
    // Glide-compiler
    kapt rootProject.ext.dependencies["Glide-compiler"]
    // ARouterCompiler
    kapt rootProject.ext.dependencies["ARouterCompiler"]
    // RoomCompiler
    kapt rootProject.ext.dependencies["room-compiler"]
    // ButterKnife
    kapt rootProject.ext.dependencies["butterknife-compiler"]

    // 每加入一个新的模块，就需要在下面对应的添加一行
    if (!isRunAlone.toBoolean()) {
        implementation project(':my')
        implementation project(':middle')
        implementation project(':leave')
        implementation project(':attendance')
    }
}
